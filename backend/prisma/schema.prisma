datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

enum UserRole {
  ADMIN
  SUPERVISOR
  EMPLOYEE
}

model User {
  id                            Int                             @id @default(autoincrement())
  name                          String
  email                         String                          @unique
  role                          UserRole                        @default(EMPLOYEE)
  DepartmentUserMapping         DepartmentUserMapping?
  SupervisorTaskMapping         SupervisorTaskMapping[]
  OnboardingEmployeeTaskMapping OnboardingEmployeeTaskMapping[]
  Checkouts                     Checkout[]
  archived                      Boolean                         @default(false)
}

model Task {
  id                            Int                             @id @default(autoincrement())
  desc                          String
  tag                           String
  DepartmentTaskMapping         DepartmentTaskMapping[]
  SupervisorTaskMapping         SupervisorTaskMapping[]
  OnboardingEmployeeTaskMapping OnboardingEmployeeTaskMapping[]
}

model Department {
  id                            Int                             @id @default(autoincrement())
  name                          String                          @unique
  DepartmentTaskMapping         DepartmentTaskMapping[]
  DepartmentUserMapping         DepartmentUserMapping[]
  OnboardingEmployeeTaskMapping OnboardingEmployeeTaskMapping[]
  SupervisorTaskMapping         SupervisorTaskMapping[]
  Device                        Device[]
  archived                      Boolean                         @default(false)
}

model DepartmentTaskMapping {
  id           Int        @id @default(autoincrement())
  task         Task       @relation(fields: [taskId], references: [id])
  taskId       Int        @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  archived     Boolean    @default(false)
}

model DepartmentUserMapping {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  archived     Boolean    @default(false)
}

model SupervisorTaskMapping {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  task         Task       @relation(fields: [taskId], references: [id])
  taskId       Int        @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  archived     Boolean    @default(false)
}

model OnboardingEmployeeTaskMapping {
  id            Int        @id @default(autoincrement())
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  task          Task       @relation(fields: [taskId], references: [id])
  taskId        Int
  department    Department @relation(fields: [departmentId], references: [id])
  departmentId  Int
  taskCompleted Boolean    @default(false)
  dateCompleted DateTime?
  archived      Boolean    @default(false)
}

// new tables for device tracking 
model Device {
  id           Int        @id @default(autoincrement())
  serialNumber String     @unique
  name         String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  location     Location   @relation(fields: [locationId], references: [id])
  locationId   Int
  checkout     Checkout[]
  archived     Boolean    @default(false)
}

model Location {
  id           Int      @id @default(autoincrement())
  locationName String
  address      String
  Devices      Device[]
  archived     Boolean  @default(false)
}

model Checkout {
  id           Int      @id @default(autoincrement())
  user         User?    @relation(fields: [userId], references: [id])
  userId       Int
  device       Device   @relation(fields: [deviceId], references: [id])
  deviceId     Int
  checkoutDate DateTime
  archived     Boolean  @default(false)
}


